var path = require('path');
var aop = require('node-aop');
var cat = require(path.resolve(__dirname,'./libs/cat.js'));

function report(req, res) {
	var tarUrl=req.url.replace(/[\?#].*$/,'')+' ';
	if (tarUrl.indexOf('/common/jwt/') == 0)
		tarUrl = '/common/jwt/';
	else if (tarUrl.indexOf('/common/refresh-jwt/') == 0)
		tarUrl = '/common/refresh-jwt/';
	var span=cat.span('URL',tarUrl);
	var isEnd=false;
	function endSpan(){
		if(res.statusCode>=400){
			span.error('http_status_'+res.statusCode,res.statusMessage);
		}
		if (!isEnd){
			isEnd=true;
			span.end();
		}
		var body = null;
		if (res._catResponseBody){
			body = res._catResponseBody
			res._catResponseBody = null;
		}
		cat.sendData(req, res, body);
		body = null;
	}
	req.on('error',function(err){
		span.error(err,'Request Error');
		endSpan();
	});
	res.on('error',function(err){
		span.error(err,'Response Error');
		endSpan();
	});
	res.on('close',endSpan);
	res.on('finish',endSpan);

	req._catRootMessageId = span.__root.__messageId;
	req._catParentMessageId = span.__messageId?span.__messageId:cat.getMessageId();
	req._catChildMessageId = cat.getMessageId();
};

function init(express) {
	if (express) {
		aop.before(express, "handle", function(req, res, callback){
			report(req, res);
			return [req, res, callback];
		});
		aop.before(express.response.__proto__, "send", function(body){
			var bodyStr = '';
			var cache = [];
			if (typeof body === 'string' || typeof body === 'boolean' || typeof body === 'number') {
				bodyStr = body;
			} else if (typeof body === 'object') {
				bodyStr = JSON.stringify(body, function(key, value) {
					if (typeof value === 'object' && value !== null) {
						if (cache.indexOf(value) !== -1) {
							return;
						}
						cache.push(value);
					}
					return value;
				});
			}
			cache = null;
			this._catResponseBody = bodyStr;
			return [body];
		});
	}
	return cat;
};


module.exports=init;